// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestTaskAPI.Data;

#nullable disable

namespace TestTaskAPI.Migrations
{
    [DbContext(typeof(TesttaskdbContext))]
    [Migration("20250815132851_FixedMeasureSequence")]
    partial class FixedMeasureSequence
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestTaskAPI.Model.Balance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Countresources")
                        .HasColumnType("integer")
                        .HasColumnName("countresources");

                    b.Property<int>("Measureid")
                        .HasColumnType("integer")
                        .HasColumnName("measureid");

                    b.Property<int>("Resourcesid")
                        .HasColumnType("integer")
                        .HasColumnName("resourcesid");

                    b.HasKey("Id")
                        .HasName("balance_pkey");

                    b.HasIndex("Measureid");

                    b.HasIndex("Resourcesid");

                    b.ToTable("balance", (string)null);
                });

            modelBuilder.Entity("TestTaskAPI.Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address");

                    b.Property<string>("Clientname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("clientname");

                    b.Property<bool>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.HasKey("Id")
                        .HasName("client_pkey");

                    b.HasIndex(new[] { "Clientname" }, "clientuniq")
                        .IsUnique();

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("TestTaskAPI.Model.Measurе", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"measurе_id_seq\"'::regclass)");

                    b.Property<bool>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Measurename")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("measurename");

                    b.HasKey("Id")
                        .HasName("measurе_pkey");

                    b.HasIndex(new[] { "Measurename" }, "measuresuniq")
                        .IsUnique();

                    b.ToTable("measurеs", (string)null);
                });

            modelBuilder.Entity("TestTaskAPI.Model.ReceiptDocumet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Numberdocument")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("numberdocument");

                    b.HasKey("Id")
                        .HasName("receiptdocumet_pkey");

                    b.HasIndex(new[] { "Numberdocument" }, "docuniq")
                        .IsUnique();

                    b.ToTable("receiptdocumet", (string)null);
                });

            modelBuilder.Entity("TestTaskAPI.Model.ReceiptResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Countresources")
                        .HasColumnType("integer")
                        .HasColumnName("countresources");

                    b.Property<int>("Documentid")
                        .HasColumnType("integer")
                        .HasColumnName("documentid");

                    b.Property<int>("Measureid")
                        .HasColumnType("integer")
                        .HasColumnName("measureid");

                    b.Property<int>("Resourcesid")
                        .HasColumnType("integer")
                        .HasColumnName("resourcesid");

                    b.HasKey("Id")
                        .HasName("receiptresources_pkey");

                    b.HasIndex("Documentid");

                    b.HasIndex("Measureid");

                    b.HasIndex("Resourcesid");

                    b.ToTable("receiptresources", (string)null);
                });

            modelBuilder.Entity("TestTaskAPI.Model.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Productname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("productname");

                    b.HasKey("Id")
                        .HasName("resources_pkey");

                    b.HasIndex(new[] { "Productname" }, "uniqname")
                        .IsUnique();

                    b.ToTable("resources", (string)null);
                });

            modelBuilder.Entity("TestTaskAPI.Model.ShippingDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("clientid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("documentnumber");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("statusid");

                    b.HasKey("Id")
                        .HasName("shippingdocument_pkey");

                    b.HasIndex("ClientId");

                    b.HasIndex("StatusId");

                    b.HasIndex(new[] { "DocumentNumber" }, "shipdocuniq")
                        .IsUnique();

                    b.ToTable("shippingdocument", (string)null);
                });

            modelBuilder.Entity("TestTaskAPI.Model.ShippingResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("documentid");

                    b.Property<int>("MeasureId")
                        .HasColumnType("integer")
                        .HasColumnName("measureid");

                    b.Property<int>("ResourcesId")
                        .HasColumnType("integer")
                        .HasColumnName("resourcesid");

                    b.HasKey("Id")
                        .HasName("shippingresources_pkey");

                    b.HasIndex("DocumentId");

                    b.HasIndex("MeasureId");

                    b.HasIndex("ResourcesId");

                    b.ToTable("shippingresources", (string)null);
                });

            modelBuilder.Entity("TestTaskAPI.Model.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Statusname")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("statusname");

                    b.HasKey("Id")
                        .HasName("status_pkey");

                    b.ToTable("status", (string)null);
                });

            modelBuilder.Entity("TestTaskAPI.Model.Balance", b =>
                {
                    b.HasOne("TestTaskAPI.Model.Measurе", "Measure")
                        .WithMany("Balances")
                        .HasForeignKey("Measureid")
                        .IsRequired()
                        .HasConstraintName("measureid_fk");

                    b.HasOne("TestTaskAPI.Model.Resource", "Resources")
                        .WithMany("Balances")
                        .HasForeignKey("Resourcesid")
                        .IsRequired()
                        .HasConstraintName("resourcesid_fk");

                    b.Navigation("Measure");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("TestTaskAPI.Model.ReceiptResource", b =>
                {
                    b.HasOne("TestTaskAPI.Model.ReceiptDocumet", "Document")
                        .WithMany("ReceiptResources")
                        .HasForeignKey("Documentid")
                        .IsRequired()
                        .HasConstraintName("documentid_fk");

                    b.HasOne("TestTaskAPI.Model.Measurе", "Measure")
                        .WithMany("ReceiptResources")
                        .HasForeignKey("Measureid")
                        .IsRequired()
                        .HasConstraintName("measureid_fk");

                    b.HasOne("TestTaskAPI.Model.Resource", "Resources")
                        .WithMany("ReceiptResources")
                        .HasForeignKey("Resourcesid")
                        .IsRequired()
                        .HasConstraintName("resourcesid_fk");

                    b.Navigation("Document");

                    b.Navigation("Measure");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("TestTaskAPI.Model.ShippingDocument", b =>
                {
                    b.HasOne("TestTaskAPI.Model.Client", "Client")
                        .WithMany("ShippingDocuments")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("clientid_fk");

                    b.HasOne("TestTaskAPI.Model.Status", "Status")
                        .WithMany("ShippingDocuments")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("statusid_fk");

                    b.Navigation("Client");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TestTaskAPI.Model.ShippingResource", b =>
                {
                    b.HasOne("TestTaskAPI.Model.ShippingDocument", "Document")
                        .WithMany("ShippingResources")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("documentid_fk");

                    b.HasOne("TestTaskAPI.Model.Measurе", "Measure")
                        .WithMany("ShippingResources")
                        .HasForeignKey("MeasureId")
                        .IsRequired()
                        .HasConstraintName("measureid_fk");

                    b.HasOne("TestTaskAPI.Model.Resource", "Resources")
                        .WithMany("ShippingResources")
                        .HasForeignKey("ResourcesId")
                        .IsRequired()
                        .HasConstraintName("resourcesid_fk");

                    b.Navigation("Document");

                    b.Navigation("Measure");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("TestTaskAPI.Model.Client", b =>
                {
                    b.Navigation("ShippingDocuments");
                });

            modelBuilder.Entity("TestTaskAPI.Model.Measurе", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("ReceiptResources");

                    b.Navigation("ShippingResources");
                });

            modelBuilder.Entity("TestTaskAPI.Model.ReceiptDocumet", b =>
                {
                    b.Navigation("ReceiptResources");
                });

            modelBuilder.Entity("TestTaskAPI.Model.Resource", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("ReceiptResources");

                    b.Navigation("ShippingResources");
                });

            modelBuilder.Entity("TestTaskAPI.Model.ShippingDocument", b =>
                {
                    b.Navigation("ShippingResources");
                });

            modelBuilder.Entity("TestTaskAPI.Model.Status", b =>
                {
                    b.Navigation("ShippingDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
